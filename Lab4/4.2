#include <bits/stdc++.h>

using namespace std;

string ltrim(const string &);
string rtrim(const string &);
vector<string> split(const string &);

/*
 * Complete the 'lilysHomework' function below.
 *
 * The function is expected to return an INTEGER.
 * The function accepts INTEGER_ARRAY arr as parameter.
 */

int lilysHomework(vector<int> arr) {
    int min_swaps = INT_MAX; // Initialize the minimum number of swaps to a large value
    vector<int> sorted(arr);
    sort(sorted.begin(), sorted.end());

    // Iterate through the array twice: once in ascending order and once in descending order
    for (size_t rev = 0; rev < 2; ++rev) {
        int current_swaps = 0; // Initialize the current number of swaps to 0

        // Reverse the sorted array if needed
        if (rev) {
            reverse(sorted.begin(), sorted.end());
        }

        vector<int> arr_new(arr);
        unordered_map<int, size_t> value_to_position; // Map to store the position of each element in the original array

        // Populate the map with the positions of elements in the original array
        for (size_t i = 0; i < arr.size(); ++i) {
            value_to_position[arr[i]] = i;
        }

        // Iterate through the array to perform swaps
        for (size_t i = 0; i < arr.size(); ++i) {
            // If the element is already in its correct position, continue to the next element
            if (arr_new[i] == sorted[i]) {
                continue;
            }

            // Perform the swap
            int current_element = arr_new[i];
            int sorted_element = sorted[i];
            swap(arr_new[i], arr_new[value_to_position[sorted_element]]);
            ++current_swaps; // Increment the swap count

            // Update the position of the swapped elements in the map
            value_to_position[current_element] = value_to_position[sorted_element];
            value_to_position[sorted_element] = i;
        }

        // Update the minimum number of swaps
        min_swaps = min(min_swaps, current_swaps);
    }

    return min_swaps; // Return the minimum number of swaps required
}


int main()
{
    string n_temp;
    getline(cin, n_temp);

    int n = stoi(ltrim(rtrim(n_temp)));

    string arr_temp_temp;
    getline(cin, arr_temp_temp);

    vector<string> arr_temp = split(rtrim(arr_temp_temp));

    vector<int> arr(n);

    for (int i = 0; i < n; i++) {
        int arr_item = stoi(arr_temp[i]);

        arr[i] = arr_item;
    }

    int result = lilysHomework(arr);

    cout << result << "\n";

    return 0;
}

string ltrim(const string &str) {
    string s(str);

    s.erase(
        s.begin(),
        find_if(s.begin(), s.end(), not1(ptr_fun<int, int>(isspace)))
    );

    return s;
}

string rtrim(const string &str) {
    string s(str);

    s.erase(
        find_if(s.rbegin(), s.rend(), not1(ptr_fun<int, int>(isspace))).base(),
        s.end()
    );

    return s;
}

vector<string> split(const string &str) {
    vector<string> tokens;

    string::size_type start = 0;
    string::size_type end = 0;

    while ((end = str.find(" ", start)) != string::npos) {
        tokens.push_back(str.substr(start, end - start));

        start = end + 1;
    }

    tokens.push_back(str.substr(start));

    return tokens;
}
